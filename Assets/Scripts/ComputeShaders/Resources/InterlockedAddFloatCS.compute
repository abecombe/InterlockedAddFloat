#pragma kernel InterlockedAddFloat
#pragma kernel ConvertUIntToFloat

#include "Assets/Packages/GPUUtil/DispatchHelper.hlsl"

StructuredBuffer<float> _DataBuffer;
StructuredBuffer<uint> _DataChunkBuffer;
RWStructuredBuffer<uint> _UIntSumBuffer;
RWStructuredBuffer<float> _FloatSumBuffer;

[numthreads(128, 1, 1)]
void InterlockedAddFloat(uint3 thread_id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(thread_id);

    const uint id = thread_id.x;

    const float val = _DataBuffer[id];
    const uint chunk_id = _DataChunkBuffer[id];

    uint i_val = asuint(val);
    uint tmp0 = 0;
    uint tmp1;
    [allow_uav_condition]
    while (true)
    {
        InterlockedCompareExchange(_UIntSumBuffer[chunk_id], tmp0, i_val, tmp1);
        if (tmp1 == tmp0) break;
        tmp0 = tmp1;
        i_val = asuint(val + asfloat(tmp1));
    }
}

[numthreads(128, 1, 1)]
void ConvertUIntToFloat(uint3 thread_id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(thread_id);

    const uint id = thread_id.x;

    _FloatSumBuffer[id] = asfloat(_UIntSumBuffer[id]);
}